@page "/items"
@inject IItemRepository itemRepository
@inject NavigationManager NavigationManager

<div class="table-responsive">
    <table class="table table-bordered text-center">
        <thead class="table-dark">
            <tr>
                <th>Create</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <button class="btn btn-primary" @onclick="CreateItem">Create</button>
                </td>
                <td>
                    <button class="btn btn-warning" @onclick="() => EditItem(1)">Edit</button>
                </td>
                <td>
                    <button class="btn btn-danger" @onclick="async () => await DeleteItem(1)">Delete</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="container">
    @if (loading)
    {
        <p><em>Loading...</em></p>
    }
    else if (!items.Any())
    {
        <p>No items found.</p>
    }
    else
    {
        <DxGrid Data="items" ShowGroupPanel="true" ShowFilterRow="true">
            <Columns>
                <DxGridDataColumn FieldName="Id" Caption="Item id" Width="100px" />
                <DxGridDataColumn FieldName="Name" Caption="Item name" />
                <DxGridDataColumn FieldName="Description" Caption="Item description" />
                <DxGridDataColumn FieldName="Price" DisplayFormat="0.00" Caption="Item price" Width="100px" />
                <DxGridDataColumn FieldName="CreatedAd" Caption="Item created at" Width="200px"
                                  SortIndex="0" SortOrder="GridColumnSortOrder.Descending" />
            </Columns>
            <TotalSummary>
                <DxGridSummaryItem FooterColumnName="CreatedAd" SummaryType="GridSummaryItemType.Count" />
            </TotalSummary>
        </DxGrid>
    }
</div>



@code {
    private IEnumerable<ItemInfoViewModel> items = new List<ItemInfoViewModel>();
    private bool loading = true;
    protected override async Task OnInitializedAsync()
    {
        items = await itemRepository.GetAllActiveItemsAsync();
        loading = false;
    }

    private void CreateItem()
    {
        NavigationManager.NavigateTo($"/item/add");
    }

    private void EditItem(int id)
    {
        NavigationManager.NavigateTo($"/item/edit/{id}");
    }

    private async Task DeleteItem(int id)
    {
        var result = await itemRepository.DeleteItemAsync(id);

        NavigationManager.NavigateTo(NavigationManager.Uri, true);

    }
}
